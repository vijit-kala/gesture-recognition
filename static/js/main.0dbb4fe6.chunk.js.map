{"version":3,"sources":["logo.svg","Util.js","victory.png","thumbs_up.png","App.js","reportWebVitals.js","index.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","App","webcamRef","useRef","canvasRef","useState","emoji","setEmoji","images","thumbs_up","victory","loadHandPose","a","handpose","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","GE","fp","VictoryGesture","ThumbsUpGesture","estimate","undefined","gesture","gestures","score","map","maxScore","indexOf","max","apply","name","console","log","getContext","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","src","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dbb4fe6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// Key points for fingers.\r\nconst fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n};\r\n\r\n// Drawing function\r\nexport const drawHand = (predictions, ctx) => {\r\n    if (predictions.length > 0) {\r\n        predictions.forEach((prediction) => {\r\n            // Finding the landmarks/points.\r\n            const landmarks = prediction.landmarks;\r\n\r\n            // Looping through all fingers to\r\n            // draw the mesh to make a complete structure of\r\n            // the hand.\r\n            for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\r\n                let finger = Object.keys(fingerJoints)[j];\r\n\r\n                // Looping through the pairs of joints.\r\n                for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\r\n                    // Get the joints.\r\n                    const firstJointIndex = fingerJoints[finger][k];\r\n                    const secondJointIndex = fingerJoints[finger][k + 1];\r\n\r\n                    // Drawing a path between both.\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(\r\n                        landmarks[firstJointIndex][0],\r\n                        landmarks[firstJointIndex][1]\r\n                    );\r\n                    ctx.lineTo(\r\n                        landmarks[secondJointIndex][0],\r\n                        landmarks[secondJointIndex][1]\r\n                    );\r\n                    ctx.strokeStyle = \"plum\";\r\n                    ctx.lineWidth = 4;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n            // Loop through them and draw them.\r\n            for (let i = 0; i < landmarks.length; i++) {\r\n                // Getting x and y points.\r\n                const x = landmarks[i][0];\r\n                const y = landmarks[i][1];\r\n\r\n                // Drawing them on canvas.\r\n                ctx.beginPath();\r\n                ctx.arc(x, y, 5, 0, 3 * Math.PI);\r\n\r\n                // Line Style.\r\n                ctx.fillStyle = \"red\";\r\n                ctx.fill();\r\n            }\r\n        });\r\n    }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/victory.8710fbb2.png\";","export default __webpack_public_path__ + \"static/media/thumbs_up.e3bf974d.png\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport { drawHand } from \"./Util\";\n\n// Importing the images and the fingerpose model.\nimport * as fp from \"fingerpose\";\nimport victory from \"./victory.png\";\nimport thumbs_up from \"./thumbs_up.png\";\nimport ok from \"./ok.png\";\n\nfunction App() {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    const [emoji, setEmoji] = useState(null);\n    const images = { thumbs_up: thumbs_up, victory: victory };\n\n    const loadHandPose = async () => {\n        const net = await handpose.load();\n        //console.log(\"Handpose model loaded\");\n\n        setInterval(() => {\n            detect(net);\n        }, 10);\n    };\n\n    const detect = async (net) => {\n        if (\n            typeof webcamRef.current !== \"undefined\" &&\n            webcamRef.current !== null &&\n            webcamRef.current.video.readyState === 4\n        ) {\n            const video = webcamRef.current.video;\n            const videoWidth = webcamRef.current.video.videoWidth;\n            const videoHeight = webcamRef.current.video.videoHeight;\n\n            webcamRef.current.video.width = videoWidth;\n            webcamRef.current.video.height = videoHeight;\n\n            canvasRef.current.width = videoWidth;\n            canvasRef.current.height = videoHeight;\n\n            const hand = await net.estimateHands(video);\n            //console.log(hand);\n\n            // Making gesture detections.\n            if (hand.length > 0) {\n                const GE = new fp.GestureEstimator([\n                    fp.Gestures.VictoryGesture,\n                    fp.Gestures.ThumbsUpGesture,\n                ]);\n\n                const gesture = await GE.estimate(hand[0].landmarks, 4);\n                //console.log(gesture);\n                if (\n                    gesture.gestures !== undefined &&\n                    gesture.gestures.length > 0\n                ) {\n                    //console.log(gesture.gestures);\n                    const score = gesture.gestures.map(\n                        (prediction) => prediction.score\n                    );\n\n                    const maxScore = score.indexOf(Math.max.apply(null, score));\n                    //console.log(maxScore);\n                    //console.log(confidence);\n\n                    setEmoji(gesture.gestures[maxScore].name);\n                    console.log(emoji);\n                }\n            }\n\n            const ctx = canvasRef.current.getContext(\"2d\");\n            drawHand(hand, ctx);\n        }\n    };\n\n    loadHandPose();\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Webcam\n                    ref={webcamRef}\n                    style={{\n                        position: \"absolute\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        left: 0,\n                        right: 0,\n                        textAlign: \"center\",\n                        zIndex: 9,\n                        width: 640,\n                        height: 480,\n                    }}\n                />\n\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                        position: \"absolute\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        left: 0,\n                        right: 0,\n                        textAlign: \"center\",\n                        zIndex: 9,\n                        width: 640,\n                        height: 480,\n                    }}\n                />\n\n                {emoji !== null ? (\n                    // eslint-disable-next-line jsx-a11y/alt-text\n                    <img\n                        src={images[emoji]}\n                        style={{\n                            position: \"absolute\",\n                            marginLeft: \"auto\",\n                            marginRight: \"auto\",\n                            left: 400,\n                            bottom: 300,\n                            right: 0,\n                            textAlign: \"center\",\n                            height: 100,\n                            zIndex: 10,\n                        }}\n                    />\n                ) : (\n                    \"\"\n                )}\n            </header>\n\n            <footer className=\"App-footer\">\n                <p>Life isn't dattebayo anymore!</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}